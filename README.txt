README.txt

Project Title: Mini Intermediate Code Generator with Semantic Analysis

Author: Poojit Luhar  
Roll No: 22000407

---

Description:
------------
This project implements a simple compiler front-end using Lex and Yacc. It parses a subset of C-like language constructs and translates them into intermediate code resembling three-address code with labels. Additionally, it performs **semantic checking** to ensure that variables are defined before use.

The following constructs are supported:
- Variable assignment (e.g., x = 5;)
- Arithmetic expressions (e.g., x = a + b * 2;)
- Print statements (e.g., print x;)
- If-Else conditional blocks
- While loops

Semantic Error Handling:
- If a variable is used before assignment, a semantic error is reported and the compilation halts.

Intermediate Code Output:
- The program outputs label-based intermediate code that shows control flow clearly.
- Temporary variables (like t123) are created to hold intermediate expression values.

---

Files:
------
1. `yacc.y`       – Contains grammar rules, semantic checks, label management, and intermediate code generation.
2. `lexer.l`      – Token definitions using regular expressions; sends tokens to the parser.
3. `parser.tab.h` – Header file generated by Bison/Yacc (do not modify manually).
4. `parser.tab.c` – Header file generated by Bison/Yacc (do not modify manually).
4. `README.txt`   – You are reading this file.

---

How to Compile and Run:
------------------------
Make sure you have `flex` and `bison` installed on your system.

Step-by-step instructions:

1. Generate the parser and lexer:
   ```bash
   bison -d yacc.y      # Generates parser.tab.c and parser.tab.h
   flex lexer.l         # Generates lex.yy.c
   gcc -o compiler parser.tab.c lex.yy.c -lfl